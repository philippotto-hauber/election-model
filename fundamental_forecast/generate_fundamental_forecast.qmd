---
title: "Forecast expected vote shares using fundamentals"
format:
    html:
        page-layout: full
        embed-resources: true
        toc: true
        toc-location: left
        self-contained-math: true
        html-math-method: katex
        code-fold: show
---

This vignette generates **fundamental forecasts of the vote shares on election day**. These serve as the prior on the latent voting intentions in the dynamic model that tracks the polling data. 

The forecasts are generated using a simple model that relates past election results to all the available macro variables and then averages the forecasts. In some states one party has clearly dominated past elections. For these no forecasts are produced as it seems highly unlikely that macro fundamentals - particulary the in historical comparison moderate swings observed in the five scenarios - will play a large role in determining the outcome of the election in those states.

This script exports a dataframe of the fundamental forecasts (`fundamental_forecasts.rds`).  In addition, it also exports the list of states in which one party has been historically dominant (`dominated_states.rds`) 

```{r}
#| echo: false
#| warning: false
library(ggplot2)
library(dplyr)

names_functions = list.files(here::here("functions"))
for (f in names_functions)
    source(here::here("functions", f))
rm(f, names_functions)
```

# Data

## Election results

Load election results
```{r}
elec_dat <- read.csv(here::here("data", "dataland_election_results_1984_2023.csv"))
elec_dat <- rename(
    elec_dat, 
    cc = cc_share,
    dgm = dgm_share,
    pdal = pdal_share,
    ssp = ssp_share
)
```

### Election winners
```{r}
elec_dat %>% 
    select(
        year,
        national_winner
    ) %>% 
    distinct() %>%
    mutate(value = 1) %>% 
    ggplot(
        aes(
            x = year,
            y = value,
            fill = national_winner
        )
    ) +
    geom_bar(stat = "identity", width = 0.9) +
    ggsci::scale_fill_jco() +
    labs(x = "", y = "", title = "Winning party") +
    theme(
        legend.position = "top",
        legend.title = element_blank(),
        axis.text.y = element_blank(),
        axis.ticks.y = element_blank()
    )
```

- three parties have won elections in the past
- PDAL by far the most 

### Popular vote

```{r}
load_pop_weights("national") %>%
    as.data.frame() %>% 
    tibble::rownames_to_column(var = "state") %>%
    rename(pop_w = ".") -> df_state_weights 

elec_dat %>%
    select(year, state = province, cc, dgm, pdal, ssp) %>%
    tidyr::pivot_longer(
        cols = -c("year", "state"), 
        names_to = "party", 
        values_to = "vote_share"
    ) %>%
    merge(
        df_state_weights,
        by = "state"
    ) %>% 
    mutate(w_vote_share = vote_share * pop_w) %>% 
    group_by(year, party) %>% 
    summarise(nat_pop_share = sum(w_vote_share)) -> pop_vote

elec_dat %>% 
    select(
        year,
        national_winner
    ) %>% 
    distinct() -> nat_winner

pop_vote %>% 
    merge(
        nat_winner, by = "year"
    ) %>%
    mutate(
        national_winner = ifelse(
            party == national_winner,
            nat_pop_share,
            NA
        )
    ) -> pop_vote

ggplot(
    pop_vote,
    aes(
        x = year,
        y = nat_pop_share,
        color = party
        )
    ) +
    geom_line() +
    geom_point(
        aes(
            y = national_winner, 
            fill = party
        )
    )+
    ggsci::scale_color_jco() +
    ggsci::scale_fill_jco() +    
    labs(title = "Share of popular vote", caption = "Dots highlight the winner of the electoral college.")
```

- stable but noisy
- election winner not always the winner of the popular vote: the CC has won elections while obtaining just a quarter of the popular vote

### state-level results
```{r}
elec_dat %>%
    select(year, province, cc, dgm, pdal, ssp) %>%
    tidyr::pivot_longer(
        cols = -c("year", "province"), 
        names_to = "party", 
        values_to = "vote_share"
    ) %>%
    mutate(vote_share = ifelse(vote_share == 0, NA, vote_share)) %>%
    ggplot(aes(x = year, y = vote_share, color = party)) + 
    geom_point()+
    ggsci::scale_color_jco() + 
    facet_wrap(~province, nrow = 4) + 
    theme(legend.position = "bottom", legend.title = element_blank())
```


- some states where a party dominates completely, e.g. PDAL in Amperville and Quantumridge or CC in Binaryshire 
- macro effects more likely in battleground states like Infoglen, Electropolis, etc.
- relatively stable vote shares over time with only a few outliers -> sample means (scaled so that vote shares sum to 1) is a plausible benchmark prior (that ignores macroeconomic fundamentals)
- upward jump in CC vote shares in 1986 in all states -> related to fundamentals? 
- conversely, drop in CC vote share in all states in 2019

Vector of states where one party has dominated the past elections
```{r}
dominated_states <- c(
    "Amperville",
    "Binaryshire",
    "Neuronia"
)
```
## Historic macroeconomic data

Load and plot macro data

```{r}
macro_dat <- read.csv(here::here("data", "dataland_economic_data_1984_2023.csv"))
macro_dat$date <- as.Date(macro_dat$date)
macro_dat$year <- as.numeric(format(macro_dat$date, "%Y"))
macro_dat$quarter <- ceiling(as.numeric(format(macro_dat$date, "%m")) / 3)
macro_dat$election <- ifelse(macro_dat$quarter == 1, macro_dat$year, macro_dat$year + 1)

macro_dat <- rename(
    macro_dat,
    gdp = year_on_year_gdp_pct_change,
    u   = unemployment_rate,
    inf = year_on_year_inflation,
    sto = year_on_year_stock_mkt_pct_change
)

macro_dat %>% 
    select(-c(
        "year",
        "quarter",
        "election"
        )
    ) %>%
    tidyr::pivot_longer(
        cols = -date,
        names_to = "variable",
        values_to = "values"
    ) %>% 
    ggplot(aes(
        x = date,
        y = values
        )
    ) + 
    geom_point(
        size = 0.4
    ) +
    geom_line(
        linewidth = 0.5
    ) +
    facet_wrap(~variable, scales = "free_y") +
    labs(x = "", y = "y/y growth", title = "Macroeconomic variables", caption = "Quarterly data.")
```

- large recession in $\approx$ 1986 (deeper GDP drop than Great Recession!)
- lower volatility in macro variables 
- occasional spikes in inflation

## Macro scenarios

```{r}
macro_scenarios <- read.csv(here::here("data", "dataland_economic_data_2024_scenarios.csv"))
macro_scenarios$election <- 2024
macro_scenarios$date <- as.Date(macro_scenarios$date)
macro_scenarios$year <- as.numeric(
    format(macro_scenarios$date, "%Y")
)
macro_scenarios$quarter <- ceiling(
    as.numeric(format(macro_scenarios$date, "%m")) / 3
)

macro_scenarios <- rename(
    macro_scenarios,
    gdp   = year_on_year_gdp_pct_change,
    u   = unemployment_rate,
    inf = year_on_year_inflation,
    sto = year_on_year_stock_mkt_pct_change
)
```


Plot scenarios 
```{r}
macro_dat %>% 
    select(date, gdp, u, inf, sto) %>%
    tidyr::pivot_longer(
        cols = -date,
        names_to = "var",
        values_to = "value"
    ) %>% 
    mutate(scenario = "historic") -> df_plt_hist

macro_scenarios %>%
    select(date, scenario, gdp, u, inf, sto) %>%
    mutate(
        date = as.Date(date)
    ) %>% 
    tidyr::pivot_longer(
        cols = -c("date", "scenario"),
        names_to = "var",
        values_to = "value"
    ) %>% rbind(df_plt_hist) %>%
    tidyr::pivot_wider(
        id_cols = c("date", "var"), 
        names_from = "scenario",
        values_from = "value"
    ) %>% 
    mutate(
        A = ifelse(is.na(A), historic, A),
        B = ifelse(is.na(B), historic, B),
        C = ifelse(is.na(C), historic, C),
        D = ifelse(is.na(D), historic, D),
        E = ifelse(is.na(E), historic, E)
    ) %>% 
    tidyr::pivot_longer(
        cols = -c("date", "var", "historic"),
        names_to = "scenario",
        values_to = "value"
    ) %>%
    group_by(var) %>%
    mutate(
        historic_upper = historic + sd(historic, na.rm = TRUE),
        historic_lower = historic - sd(historic, na.rm = TRUE)
    ) %>%
    filter(date >= as.Date("2022-01-01")) %>% 
    ggplot(aes(
        x = date, 
        y = value, 
        color = scenario,
        fill = scenario)) + 
    geom_line() + 
    geom_line(aes(y = historic), color = "black") +
    geom_line(
        aes(y = historic_upper),
        color = "black",
        linetype = "dotted"
    )+
    geom_line(
        aes(y = historic_lower),
        color = "black",
        linetype = "dotted"
    )+
    ggsci::scale_color_startrek() +
    facet_wrap(~ var, scales = "free_y")+
    labs(caption = "The dotted black lines indicate +/- one standard deviation. ")
```

- overall, variation in macro variables well within historically observed volatility 

- scenarios B and E: "business as usual", scenarios A and D: "boom", scenario C: "bust"

- clear correlation across macro variables suggesting informational redundancies -> can maybe get away with including only one macro regressor. However, this assumes that the historical relationship between macro regressors and election outcomes is similar, i.e. that both unemployment rate and GDP growth can explain the historical vote shares equally well which need not be the case! Also, historically, the correlation between macro variables is not as strong as in the scenarios -> think fairly stable unemployment and massive swings in GDP growth during Covid

# Fundamental forecast

For each macro variable available, I estimate a separate regression model for each state and use it to generate forecasts for all the scenarios. These conditional forecasts are then averaged over the macro variables. No forecasts are produced for those states where historically one party has clearly dominated in the elections (see above)!

## Model

The model takes the following form

$$
y^{s}_{e} = \beta_0 + \beta_1 x_e^{Q1} + \beta_2 x_e^{Q4} + \gamma z^{p}_e + \epsilon_e    
$$

where $y^s_{e}$ is a vector of the parties' vote shares in state $s$ in election $e$. $x^{*}_e$ denote the latest two values of a macroeconmic variable before election $e$, e.g. for the election in 2023 y/y GDP growth in 2023Q1 and 2022Q4 and $z_e$ a dummy variable controlling for the incumbent party. (I tried to include an interaction term but the estimation algorithm did not to converge.)

### regressand $y$

```{r}
elec_dat %>% 
    select(
        year,
        state = province,
        cc,
        dgm,
        pdal,
        ssp
    ) %>%
    tidyr::pivot_longer(
        cols = -c(state, year),
        names_to = "party",
        values_to = "value"
    )-> reg_y

```

### regressors $X$

```{r}
# Load parties (and convert to lower case for consistency)
parties <- tolower(load_parties())
macro_dat %>% 
    select(
        election, 
        gdp,
        inf,
        u, 
        sto, 
        quarter
    ) %>%
    filter(
        quarter %in% c(1, 4),
        election >= 1984
    ) %>%
    tidyr::pivot_longer(
        cols = c(gdp, inf, u, sto),
        names_to = "macrovar",
        values_to = "values"
    ) %>%
    mutate(quarter = paste0("Q", quarter)) %>% 
    tidyr::pivot_wider(
        id_cols = c(election, macrovar),
        names_from = quarter,
        values_from = values
    ) -> reg_X

elec_dat %>%
    select(
        election = year,
        party_in_power,
    ) %>% 
    distinct() -> reg_X_dummy

reg_X_dummy$party_in_power <- sapply(
    reg_X_dummy$party_in_power,
    function(x) {
        which(x == parties)
    }
)

reg_X <- merge(
    reg_X,
    reg_X_dummy,
    by = "election")
```

### predictors $X^{f}$

```{r}
macro_scenarios %>% 
    select(
        scenario,
        election,
        quarter,
        gdp,
        u, 
        inf,
        sto
    ) %>%
    tidyr::pivot_longer(
        cols = -c(election, quarter, scenario),
        names_to = "macrovar",
        values_to = "value"
    ) %>%
    mutate(
        quarter = paste0(
            "Q", 
            as.character(quarter)
        )
    ) %>% 
    tidyr::pivot_wider(
        id_cols = c(election, macrovar, scenario),
        names_from = quarter,
        values_from = value) -> reg_Xfore

    reg_Xfore$party_in_power <- which("pdal" == parties)
```

### Generate conditional forecasts

Loop over states and macro variables, producing a forecast of the vote share in all scenarios

```{r}
scenarios <- load_scenarios()
n_parties_by_state <- load_n_parties_by_geography("state")
states <- load_states()
contested_states <- states[!(states %in% dominated_states)]
macrovars <- c("gdp", "u", "inf", "sto")
df_fund_fcast <- data.frame()
for (s in contested_states) {
    # regressand
    reg_y %>%
        filter(
            state == s,
            value != 0
        ) %>%
        tidyr::pivot_wider(
            id_cols = c(year, state),
            names_from = party,
            values_from = value
        ) %>%        
        arrange(year) %>% 
        select(-c(year, state)) %>% 
        as.matrix() %>% 
        DirichletReg::DR_data() -> reg_y_tmp

    for (mv in macrovars) {
        # regressors
        reg_X %>% 
            filter(
                macrovar == mv) -> reg_X_tmp

        # estimate model
        dirreg <- DirichletReg::DirichReg(
            reg_y_tmp ~ Q1 + Q4 + party_in_power,
            reg_X_tmp
        )

        # predict
        for (scen in scenarios) {
            reg_Xfore %>% 
                filter(
                    macrovar == mv,
                    scenario == scen
            ) -> reg_Xfore_tmp

            predict(
                dirreg, 
                newdata = reg_Xfore_tmp
            ) -> pred
            df_fund_fcast <- rbind(
                df_fund_fcast, 
                data.frame(
                    state = s, 
                    scenario = scen,
                    party = parties[1:n_parties_by_state[s]],
                    macrovar = mv,
                    value = as.vector(pred)
                )
            ) 
        }
    }
}
```

Average forecasts over macro variables

```{r}
df_fund_fcast %>% 
    group_by(
        state,
        scenario,
        party) %>%
    summarise(value = mean(value)) -> df_fund_fcast
```

Check that all vote share in a given state and scenario sum to 1

```{r}
df_fund_fcast %>%
    group_by(
        state,
        scenario
    ) %>% 
    summarise(
        check_sum  = sum(value)
    ) %>% 
    mutate(
        diff_check = check_sum - 1
    ) %>% arrange(
        desc(
            abs(diff_check)
        )
    )
```

Rescale to avoid miniscule differences

```{r}
df_fund_fcast %>% 
    group_by(state, scenario) %>% 
    mutate(
        value = value / sum(value)
    ) -> df_fund_fcast
```

## Plot forecasts

On the whole, the variation in the predicted vote share across scenarios is not large. That is consistent with there not being very large macro effects to begin with as well as the moderate scenarios. 

```{r}
df_fund_fcast %>% 
    mutate(year = 2024) %>% 
    select(year, state, party, value, scenario) -> df_plt

reg_y %>% 
    mutate(
        scenario = "historic"
    ) %>%
    rbind(df_plt) -> df_plt

df_plt %>% 
filter(
    value != 0
    ) %>%
     ggplot(
        aes(
            x = year,
            y = value,
            color = party,
            shape = scenario
        )
     ) +
     geom_line() +
     geom_point() +
     ggsci::scale_color_jco()+
     scale_shape_manual(
        values = c(
            "historic" = NA,
            "A" = 1,
            "B" = 2,
            "C" = 3,
            "D" = 4,
            "E" = 5
        )
    )+
    facet_wrap(~state, scales = "free_y") +
    labs(title = "Election results and conditional forecasts") 
```

## Benchmark forecast

Calculate the mean vote share of each party in each state. This will serve as the fundamental forecast in those states where a party has dominated past elections

```{r}
elec_dat %>% 
    select(year, state = province, region, cc, dgm, pdal, ssp) %>%
    tidyr::pivot_longer(
        cols = -c("year", "state", "region"),
        names_to = "party",
        values_to = "vote_share"
    ) %>%
    group_by(party, state) %>%
    mutate(
        mean_vote_share = mean(vote_share)
        ) %>% 
    filter(!(party == "ssp" & region != "Synapse Territories")) %>%
    select(-c("region", "vote_share", "year")) %>%
    distinct() %>% 
    ungroup() %>% 
    group_by(state) %>%
    mutate(sum_vote_share = sum(mean_vote_share),
           mean_vote_share = mean_vote_share / sum_vote_share) %>% 
    select(-sum_vote_share) %>% 
    rename(vote_share = mean_vote_share) -> df_mean_vote_share
```

## Export

Repeat mean vote share for each scenario

```{r}
df_priors <- do.call(
    "rbind",
    lapply(
        scenarios,
        function(scen) {
            df_tmp <- df_mean_vote_share
            df_tmp$scenario <- scen
            df_tmp
        }
    )
)
```

Merge with the conditonal forecasts calculated above, obtaining `NA` if no forecast was produced

```{r}
merge(
    df_priors,
    df_fund_fcast,
    by = c("state", "party", "scenario"),
    all.x = TRUE
) -> df_priors

df_priors$vote_share <- ifelse(
    is.na(df_priors$value),
    df_priors$vote_share,
    df_priors$value
)
```

Write fundamental forecast to file
```{r}
saveRDS(
    select(
        df_priors,
        province = state,
        party,
        vote_share,
        scenario
    ),
    file = here::here(
        "fundamental_forecast",
        "fundamental_forecast.rds"
    )
)
```

Also export list of states in which one party has historically dominated


```{r}
saveRDS(
    dominated_states,
    file = here::here(
        "fundamental_forecast",
        "dominated_states.rds"
    )
)
```

Export mean vote share as fundamental forecast for backtests

```{r}
saveRDS(
    select(
        df_mean_vote_share,
        province = state,
        party,
        vote_share
    ),
    file = here::here(
        "backtest",
        "mean_vote_shares.rds"
    )
)
```