---
title: "Plot backtest results"
format: 
    html:
        page-layout: full
        embed-resources: true
        toc: true
        toc-location: left
        self-contained-math: true
        html-math-method: katex
params:
    year: 2023
---

# Libraries and functions

```{r}
#| output: false
library(ggplot2)
library(dplyr)
library(data.table)
names_functions = list.files(here::here("functions"))
for (f in names_functions)
    source(here::here("functions", f))
rm(f, names_functions)
```

# Preliminaries

```{r}
parties <- load_parties()
states <- load_states()
regions <- load_regions()
states_regions <- load_dataland_states_regions()
n_parties_by_state <- load_n_parties_by_geography("state")
dates_campaign <- load_dates_election_campaign(year = params$year)
electoral_votes <- load_electoral_votes()
election_day <- load_election_day(year = params$year)
```

## Election results

Election results at the state level

```{r}
load_election_vote_shares() %>%
    dplyr::filter(year == params$year) %>%
    tidyr::pivot_longer(
        cols = c("CC", "DGM", "PDAL", "SSP"),
        names_to = "party",
        values_to = "vote_share"
    ) %>%
    dplyr::mutate(
        t = election_day
    ) %>% 
    dplyr::rename(
        geography = state
    ) %>% 
    filter(
        vote_share != 0
    ) -> df_state_results
```

...regional level

```{r}

load_pop_weights("regional") %>%
    as.data.frame() %>% 
    tibble::rownames_to_column(var = "region") %>%
    tidyr::pivot_longer(
        cols = -region,
        names_to = "geography",
        values_to  = "pop_w_reg") %>% 
        select(-region) -> df_state_weights_regions

df_state_results %>%
    merge(
        df_state_weights_regions,
        by = "geography"
    ) %>% 
    mutate(w_vote_share = vote_share * pop_w_reg) %>% 
    group_by(year, region, party) %>% 
    summarise(vote_share = sum(w_vote_share)) %>% 
    dplyr::mutate(t = election_day) -> df_regions_results
```

...national level (= popular vote)

```{r}
load_pop_weights("national") %>%
    as.data.frame() %>% 
    tibble::rownames_to_column(var = "geography") %>%
    rename(pop_w = ".") -> df_state_weights 

df_state_results %>%
    merge(
        df_state_weights,
        by = "geography"
    ) %>% 
    mutate(w_vote_share = vote_share * pop_w) %>% 
    group_by(year, party) %>% 
    summarise(vote_share = sum(w_vote_share)) %>% 
    dplyr::mutate(t = election_day) -> df_pop_vote
```

# Plots

Read in data

```{r}
scen <- "all"
out <- readRDS(
    here::here(
        "backtest",
        paste0(
            "mcmc_out_",
            params$year,
            "_",
            scen,
            ".rds"
        )
    )
)
```

Convert draws
```{r}
df_draws_ppi <- convert_draws_to_dt(
    rstan::extract(out, pars = "ppi")[["ppi"]],                        
    geographies = states,
    parties = parties,
    dates_campaign = dates_campaign
)

df_draws_ppi_reg <- convert_draws_to_dt(
    rstan::extract(out, pars = "ppi_reg")[["ppi_reg"]],                        
    geographies = "regional",
    parties = parties, 
    dates_campaign = dates_campaign
)

df_draws_ppi_nat <- convert_draws_to_dt(
    rstan::extract(out, pars = "ppi_nat")[["ppi_nat"]],                        
    geographies = "national",
    parties = parties, 
    dates_campaign = dates_campaign
)
```


Load polls 
```{r}
    df_polls <- read.csv(here::here("backtest", paste0("df_polls_", params$year, "_", scen, ".csv")))
    df_polls$date <- as.Date(df_polls$date)
    # make non-zero polls more visible in plots
    df_polls$value = ifelse(df_polls$value == 0, 
                            NA, 
                            df_polls$value) 
```

Load priors and invert alr transformation

```{r}
priors <- readRDS(here::here("priors", "priors.Rds"))
df_prior_ppi <- invert_alr_on_prior(priors[["A"]][["m_mmu_T"]])
```

## Calc prob win

```{r}
df_prob_win_election <- do.call(
    "rbind", 
    lapply(
        dates_campaign, 
        FUN = calc_prob_win_election,
        df_draws_ppi = df_draws_ppi,
        df_draws_ppi_nat = df_draws_ppi_nat,
        states = states,
        parties = parties,
        electoral_votes = electoral_votes
    )
)
```


### Plots


Add caption that mentions winning party

```{r}
plts <- list()

plot_prob_win_election_over_time(
    df_prob_win_election, 
    paste0(
        params$year,
        " ",
        scen
    )
) -> plts[[scen]][["plt_prob_win_election_over_time"]]
```

```{r}
plts[[scen]][["plt_prob_win_election_over_time"]]
```

## Density plots of expected vote shares on election day

```{r}
 plot_ppiT(
        df_draws_ppi, 
        df_prior_ppi, 
        election_day, 
        n_geographies = length(states), 
        paste0(params$year, " ", scen),
        df_state_results
    ) -> plts[[scen]][["plt_ppiT"]]
```


```{r}
plts[[scen]][["plt_ppiT"]]
```

## Expected vote shares over time




```{r}
    plot_ppi(
        df_draws_ppi, 
        df_polls, 
        n_geographies = length(states), 
        type_of_poll = "state", 
        plt_title_prefix = paste0(params$year, " ", scen),
        df_results = filter(
            df_state_results,
            vote_share != 0
        )
    ) -> plts[[scen]][["plt_ppi"]]
```

```{r}
plts[[scen]][["plt_ppi"]]
```

```{r}
    plot_ppi(
        df_draws_ppi_reg, 
        df_polls, 
        n_geographies = length(states), 
        type_of_poll = "regional", 
        plt_title_prefix = paste0(params$year, " ", scen),
        df_results = filter(
            df_regions_results,
            vote_share != 0
        )
    ) -> plts[[scen]][["plt_ppi_reg"]]
```

```{r}
plts[[scen]][["plt_ppi_reg"]]
```


```{r}
    plot_ppi(
        df_draws_ppi_nat, 
        df_polls, 
        n_geographies = 1, 
        type_of_poll = "national", 
        plt_title_prefix = paste0(params$year, " ", scen),
        df_results = df_pop_vote
    ) -> plts[[scen]][["plt_ppi_nat"]]
```

```{r}
plts[[scen]][["plt_ppi_nat"]]
```

